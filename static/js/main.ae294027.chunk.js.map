{"version":3,"sources":["utils/history.js","components/Button.js","components/Filters.js","components/List.js","containers/Home.js","containers/App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Button","props","btnclassname","active","id","year","type","onClick","clickHandler","className","children","Filters","Card","style","padding","fontWeight","ButtonGroup","this","activeYear","yearHandler","activeLaunch","launchHandler","activeLand","landHandler","Component","List","launchList","map","x","key","Math","random","Img","variant","src","links","mission_patch","backgroundColor","Body","Title","color","mission_name","flight_number","Text","mission_id","ids","toString","launch_year","launch_success","rocket","first_stage","cores","land_success","App","a","parseInt","setState","callApi","console","log","url","state","fetch","then","response","json","data","history","push","catch","err","error","window","pushState","Container","Row","textAlign","Home","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ae294027.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from 'react';\r\n\r\nfunction Button(props) {\r\n    const btnclassname = (props.active == true) ? 'btn btn-success active' : 'btn btn-success'\r\n    return (\r\n        <button id={props.year} type=\"button\" onClick={() => { props.clickHandler(props.year) }} className={btnclassname}>{props.children}</button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport { Card, ButtonGroup, } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Button from './Button';\r\n\r\nclass Filters extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card style={{ padding: '10px' }} >\r\n                <h5 style={{ fontWeight: 'bold' }}>Filters</h5>\r\n                <h6 className=\"filterstyle\">Launch Year</h6>\r\n\r\n                <ButtonGroup>\r\n                    <Button year='2006' active={this.props.activeYear === 2006} clickHandler={this.props.yearHandler}>2006</Button>\r\n                    <Button year='2007' active={this.props.activeYear === 2007} clickHandler={this.props.yearHandler}>2007</Button>\r\n\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Button year='2008' active={this.props.activeYear === 2008} clickHandler={this.props.yearHandler}>2008</Button>\r\n                    <Button year='2009' active={this.props.activeYear === 2009} clickHandler={this.props.yearHandler}>2009</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Button year='2010' active={this.props.activeYear === 2010} clickHandler={this.props.yearHandler}>2010</Button>\r\n                    <Button year='2011' active={this.props.activeYear === 2011} clickHandler={this.props.yearHandler}>2011</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Button year='2012' active={this.props.activeYear === 2012} clickHandler={this.props.yearHandler}>2012</Button>\r\n                    <Button year='2013' active={this.props.activeYear === 2013} clickHandler={this.props.yearHandler}>2013</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Button year='2014' active={this.props.activeYear === 2014} clickHandler={this.props.yearHandler}>2014</Button>\r\n                    <Button year='2015' active={this.props.activeYear === 2015} clickHandler={this.props.yearHandler}>2015</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Button year='2016' active={this.props.activeYear === 2016} clickHandler={this.props.yearHandler}>2016</Button>\r\n                    <Button year='2017' active={this.props.activeYear === 2017} clickHandler={this.props.yearHandler}>2017</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Button year='2018' active={this.props.activeYear === 2018} clickHandler={this.props.yearHandler}>2018</Button>\r\n                    <Button year='2019' active={this.props.activeYear === 2019} clickHandler={this.props.yearHandler}>2019</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Button year='2020' active={this.props.activeYear === 2020} clickHandler={this.props.yearHandler}>2020</Button>\r\n                </ButtonGroup>\r\n\r\n                <h6 className=\"filterstyle\">Successful Launch</h6>\r\n                <ButtonGroup>\r\n                    <Button year='true1' active={this.props.activeLaunch == 'true'} clickHandler={this.props.launchHandler}>True</Button>\r\n                    <Button year='false1' active={this.props.activeLaunch == 'false'} clickHandler={this.props.launchHandler}>False</Button>\r\n                </ButtonGroup>\r\n                <h6 className=\"filterstyle\">Successful Landing</h6>\r\n                <ButtonGroup>\r\n                    <Button year='true2' active={this.props.activeLand == 'true'} clickHandler={this.props.landHandler}>True</Button>\r\n                    <Button year='false2' active={this.props.activeLand == 'false'} clickHandler={this.props.landHandler}>False</Button>\r\n                </ButtonGroup>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Filters;","import React, { Component } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    this.props.launchList.map(x => {\r\n\r\n                        return (\r\n                            <div className=\"col-sm-6 col-lg-3 col-xs-12\" key={Math.random()}>\r\n                                <Card className=\"cardabc\" key={Math.random()}>\r\n                                    <Card.Img variant=\"top\" src={x.links.mission_patch} style={{ backgroundColor: 'rgba(0, 0, 0, 0.1)' }} />\r\n                                    <Card.Body>\r\n                                        <Card.Title style={{ color: '#898CB6' }}>{x.mission_name}#{x.flight_number}</Card.Title>\r\n                                        <Card.Text>\r\n                                            <b>Mission Ids: </b>\r\n                                            <ul>{x.mission_id.map(ids => <li key={ids}>{ids.toString()}</li>)}</ul>\r\n\r\n                                            <b>Launch Year: </b>{x.launch_year}\r\n                                            <br />\r\n                                            <b>Successful Launch: </b>{x.launch_success === null ? \"Not launched\" : x.launch_success.toString()}\r\n                                            <br />\r\n                                            <b>Successful Landing: </b>{x.rocket.first_stage.cores[0].land_success === null ? \"NULL\" : x.rocket.first_stage.cores[0].land_success.toString()}\r\n                                        </Card.Text>\r\n                                    </Card.Body>\r\n\r\n                                </Card>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Row, Container } from 'react-bootstrap';\r\nimport history from '../utils/history';\r\nimport Filters from '../components/Filters';\r\nimport './App.css';\r\nimport List from '../components/List';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            launchList: [],\r\n            activeYear: '',\r\n            activeLaunch: '',\r\n            activeLand: ''\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://api.spaceXdata.com/v3/launches?limit=100')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({ launchList: [...data] });\r\n            });\r\n        window.history.pushState('', '', '/SpaceX');\r\n\r\n    }\r\n    yearHandler = async (id) => {\r\n        let x = parseInt(id);\r\n        await this.setState({\r\n            activeYear: x,\r\n            activeLaunch: '',\r\n            activeLand: ''\r\n        })\r\n        this.callApi();\r\n    }\r\n    launchHandler = async (id) => {\r\n        let x = id === 'true1' ? 'true' : 'false';\r\n        console.log(\"launch\" + x);\r\n        await this.setState({\r\n            activeLaunch: x\r\n        });\r\n        this.callApi();\r\n    }\r\n\r\n    landHandler = async (id) => {\r\n        let x = id === 'true2' ? 'true' : 'false';\r\n        await this.setState({\r\n            activeLand: x\r\n        });\r\n        this.callApi();\r\n    }\r\n    callApi = async () => {\r\n        let url = 'SpaceX?year=' + `${this.state.activeYear}` + '&launchsuccess=' + `${this.state.activeLaunch}` + '&landsuccess=' + `${this.state.activeLand}` + '&result';\r\n        await fetch(`https://api.spaceXdata.com/v3/launches?limit=100&launch_success=${this.state.activeLaunch}&launch_year=${this.state.activeYear}&land_success=${this.state.activeLand}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (this.state.activeYear === 2020) {\r\n\r\n                }\r\n                this.setState({ launchList: [...data] });\r\n                history.push(`${url}`);\r\n            }).catch(err => {\r\n                console.error('Error-', err);\r\n            });\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ backgroundColor: 'rgba(0, 0, 0, 0.1)' }}>\r\n                <header>\r\n                    <Container>\r\n                        <h1>SpaceX Launch Programs</h1>\r\n                        <br />\r\n                        <div className=\"row\">\r\n                            <div className='col-sm-3 '>\r\n                                <Filters\r\n                                    yearHandler={this.yearHandler}\r\n                                    launchHandler={this.launchHandler}\r\n                                    landHandler={this.landHandler}\r\n                                    activeYear={this.state.activeYear}\r\n                                    activeLand={this.state.activeLand}\r\n                                    activeLaunch={this.state.activeLaunch}\r\n                                />\r\n\r\n                            </div>\r\n                            <div className=\"col-sm-9\">\r\n\r\n                                <Row>\r\n                                    <List launchList={this.state.launchList} />\r\n\r\n                                </Row>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </Container>\r\n                </header>\r\n                <footer style={{ textAlign: 'center', fontWeight: 'bold' }}>\r\n                    <p>Developed By:Deepali Gupta</p>\r\n                </footer>\r\n            </div >\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './Home';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Home />\n    )\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport history from './utils/history';\n\nReactDOM.render(\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}